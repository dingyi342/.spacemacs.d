(global-set-key (kbd "C-M-g") (lambda ()
                                      (interactive)
                                      (abort-recursive-edit)
                                      (keyboard-escape-quit)
                                      (keyboard-quit)
                                      ))
(defun doom/escape ()
  "Run `doom-escape-hook'."
  (interactive)
  (cond ((minibuffer-window-active-p (minibuffer-window))
         ;; quit the minibuffer if open.
         (abort-recursive-edit))
        ;; don't abort macros
        ((or defining-kbd-macro executing-kbd-macro) nil)
        ;; Back to the default
        ((keyboard-quit))))

(global-set-key [remap keyboard-quit] #'doom/escape)

;; 编码问题
(setq default-process-coding-system  '(utf-8 . utf-8))
(setq process-coding-system-alist '(utf-8 . utf-8))
(setq network-coding-system-alist '(utf-8 . utf-8))
;; (setq file-coding-system-alist '(raw-test . raw-text-unix))

(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
;; (prefer-coding-system 'utf-8)
;; (set-language-environment "Chinese-GB18030")
(set-language-environment "UTF-8")
;; (setq read-quoted-char-radix 10)

;; set coding config, last is highest priority.
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Recognize-Coding.html#Recognize-Coding
(prefer-coding-system 'cp950)
(prefer-coding-system 'gb2312)
(prefer-coding-system 'cp936)
(prefer-coding-system 'gb18030)
(prefer-coding-system 'utf-16)
(prefer-coding-system 'utf-8-dos)
;; (prefer-coding-system 'utf-8-unix)
(prefer-coding-system 'utf-8)

;; 清除行尾空格，把多个空行变成一个空行
;; 有些语言会出错，比如markdown删除了行尾空格
(defun xah-clean-whitespace ()
  "Delete trailing whitespace, and replace repeated blank lines to just 1.
Only space and tab is considered whitespace here.
Works on whole buffer or text selection, respects `narrow-to-region'.

URL `http://ergoemacs.org/emacs/elisp_compact_empty_lines.html'
Version 2017-09-22"
  (interactive)
  (let ($begin $end)
    (if (region-active-p)
        (setq $begin (region-beginning) $end (region-end))
      (setq $begin (point-min) $end (point-max)))
    (save-excursion
      (save-restriction
        (narrow-to-region $begin $end)
        (progn
          (goto-char (point-min))
          (while (re-search-forward "[ \t]+\n" nil "move")
            (replace-match "\n")))
        (progn
          (goto-char (point-min))
          (while (re-search-forward "\n\n\n+" nil "move")
            (replace-match "\n\n")))
        (progn
          (goto-char (point-max))
          (while (equal (char-before) 32) ; char 32 is space
            (delete-char -1))))
      (message "white space cleaned"))))

;; (add-hook 'after-save-hook #'xah-clean-whitespace)
;; 你在 after后再清理，还要再保存一次啊。
(add-hook 'before-save-hook #'xah-clean-whitespace)

(defun xah-clean-empty-lines ()
  "Replace repeated blank lines to just 1.
Works on whole buffer or text selection, respects `narrow-to-region'.

URL `http://ergoemacs.org/emacs/elisp_compact_empty_lines.html'
Version 2017-09-22"
  (interactive)
  (let ($begin $end)
    (if (region-active-p)
        (setq $begin (region-beginning) $end (region-end))
      (setq $begin (point-min) $end (point-max)))
    (save-excursion
      (save-restriction
        (narrow-to-region $begin $end)
        (progn
          (goto-char (point-min))
          (while (re-search-forward "\n\n\n+" nil "move")
            (replace-match "\n\n")))))))

;;;; 杀死buffer

  ;; (kill-buffer "*spacemacs*")
  ;; 有warnings 还是处理比较好。
  ;; (kill-buffer "*Warnings*")
  ;; (delete-other-windows)

  ;;dingyi/fonts
  ;; Auto generated by cnfonts
  ;; <https://github.com/tumashu/cnfonts>
  ;;(set-face-attribute
  ;; 'default nil
  ;; :font (font-spec :name "ConsolasWithYahei"
  ;;                  :weight 'normal
  ;;                  :slant 'normal
  ;;                  :size 15.0))
  ;;(dolist (charset '(kana han symbol cjk-misc bopomofo))
  ;;  (set-fontset-font
  ;;   (frame-parameter nil 'font)
  ;;   charset
  ;;   (font-spec :name "-MS  -Microsoft YaHei-normal-normal-normal-*-*-*-*-*-*-2-iso10646-1"
  ;;              :weight 'normal
  ;;              :slant 'normal
  ;;              :size 14.0)))

  ;; ;; (setq package-user-dir "~/.emacs.d/elpa/")

  ;; dingyi/flypy input method
  ;; spacemacs yas expand
  ;; (global-set-key (kbd "TAB") 'yas-expand)
  ;; (define-key evil-insert-state-map (kbd "TAB") 'yas-expand)

  ;; after evil
  ;; (define-key evil-normal-state-map (kbd ",")
  ;;   (lookup-key spacemacs-default-map
  ;;               (kbd "o")))

  ;; ;; kill *spacemacs*
  ;; (kill-buffer "*spacemacs*")
  ;; (when (string= "*scratch*" (buffer-name))
    ;; (spacemacs/switch-to-scratch-buffer))

  ;; (define-key evil-normal-state-map (kbd ",f") 'switch-buffer-without-purpose)
  ;; SPC m 和 m 都在 spacemacs-default-map里找到了。
  ;; (define-key evil-normal-state-map (kbd ";")
    ;; (lookup-key spacemacs-default-map
                ;; (kbd "m")))

  ;; org capture
  ;; 增加一个 journal
  ;; (add-to-list 'org-capture-templates
  ;;              '("j" "Journal"
  ;;                entry (file+olp+datetree "~/.txnix/.org_notes/diary/journal.org")
  ;;                "* %U - %^{heading} %^g\n %?\n"
  ;;                ))

;;;; 代理
;;  (setq url-proxy-services
;;        '(
;;          ("http"     . "http://127.0.0.1:42647")
;;          ("https"    . "http://127.0.0.1:42647")
;;          ("ftp"      . "http://127.0.0.1:42647")
;;          ("no_proxy" . "^\\(localhost\\|10.*\\)")
;;          ))
;; (setq url-using-proxy t)
;; (setq url-gateway-local-host-regexp
;;       (concat "\\`" (regexp-opt '("localhost" "127.0.0.1")) "\\'"))

;; ;; Configure network proxy
;; (setq my-proxy
;;       '(
;;         ("http"     . "http://127.0.0.1:42647")
;;         ("https"    . "http://127.0.0.1:42647")
;;         ("ftp"      . "http://127.0.0.1:42647")
;;         ("no_proxy" . "^\\(localhost\\|10.*\\)")
;;         ))

;;user-init ends here.

;;;; 设置所有buffer的默认状态为normal mode
;;(setq evil-emacs-state-modes nil)
;;(setq evil-insert-state-modes nil)
;;(setq evil-motion-state-modes nil)
;;(setq evil-evilified-state-modes nil)

;;;; 设置字体
  ;;dingyi/fonts
  ;; Auto generated by cnfonts
  ;; <https://github.com/tumashu/cnfonts>
  ;; (set-face-attribute
  ;;  'default nil
  ;;  :font (font-spec :name "ConsolasWithYahei"
  ;;                   :weight 'normal
  ;;                   :slant 'normal
  ;;                   :size 17.0))
  ;; (dolist (charset '(kana han symbol cjk-misc bopomofo))
  ;;   (set-fontset-font
  ;;    (frame-parameter nil 'font)
  ;;    charset
  ;;    (font-spec :name "-MS  -Microsoft YaHei-normal-normal-normal-*-*-*-*-*-*-0-iso10646-1"
  ;;               :weight 'normal
  ;;               :slant 'normal
  ;;               :size 16.0) (current-buffer) nil))

  ;; (define-key spacemacs-default-map (kbd "s-SPC") 'full-prefix-emacs)

  ;; (setq dotspacemacs-emacs-leader-key '("M-m" "s-SPC"))

  ;; dingyi/flypy input method
  ;; spacemacs yas expand
  ;; (global-set-key (kbd "TAB") 'yas-expand)
  ;; (define-key evil-insert-state-map (kbd "TAB") 'yas-expand)

  ;; auto-complete
;;   (setq auto-completion-complete-with-key-sequence (kbd "jk")
;;         auto-completion-private-snippets-directory t
;;    )

;;;; 补全 tab C-i M-/ C-p
;;   (global-set-key (kbd "C-i") 'yas-expand)
;;   (with-eval-after-load 'org
;;     (define-key org-mode-map (kbd "TAB") 'yas-expand)
;;     (define-key org-mode-map (kbd "<C-i>") 'yas-expand)
;;     )
;;;; 设置默认的shell为eshell
;;   (setq shell-default-shell 'eshell)

;;;; kill *spacemacs*
  ;; (kill-buffer "*spacemacs*")
;;;; 启动显示 scratch
  ;; (when (string= "*scratch*" (buffer-name))
    ;; (spacemacs/switch-to-scratch-buffer))

  ;; (define-key evil-normal-state-map (kbd ",f") 'switch-buffer-without-purpose)
  ;; SPC m 和 m 都在 spacemacs-default-map里找到了。
  ;; (define-key evil-normal-state-map (kbd ";")
    ;; (lookup-key spacemacs-default-map
                ;; (kbd "m")))

;;;; C-[ esc
;;   (defun spacemacs/translate-C-\[ (_)
;;     "If `dotspacemacs-distinguish-gui-esc' is non nil, the raw key
;; sequence does not include <tab> or <kp-tab>, and we are in the
;; gui, translate to [C-i]. Otherwise, [9] (TAB)."
;;     (interactive)
;;     (if (and (not (cl-position 'esc (this-single-command-raw-keys)))
;;              (not (cl-position 'kp-escape (this-single-command-raw-keys)))
;;              dotspacemacs-distinguish-gui-esc
;;              (display-graphic-p))
;;         ;; (kbd "<C-[>") [?\C-\[]
;;         [C-\[] [?\C-\[]
;;         ))
;;   ;; (define-key key-translation-map [?\C-\[] 'spacemacs/translate-C-\[)
;;   (define-key input-decode-map [?\C-\[] 'spacemacs/translate-C-\[)

